// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Attribute struct {
	AttributeType AttributeType `json:"attributeType"`
	Value         int           `json:"value"`
	Cost          int           `json:"cost"`
}

type Character struct {
	Name            string       `json:"name"`
	Player          string       `json:"player"`
	Campaign        string       `json:"campaign"`
	AvailablePoints int          `json:"availablePoints"`
	Attributes      []*Attribute `json:"attributes"`
}

type CharacterGCA5Import struct {
	Campaign string `json:"campaign"`
	Data     string `json:"data"`
}

type Mutation struct {
}

type Query struct {
}

type AttributeType string

const (
	AttributeTypeSt     AttributeType = "ST"
	AttributeTypeDx     AttributeType = "DX"
	AttributeTypeIq     AttributeType = "IQ"
	AttributeTypeHt     AttributeType = "HT"
	AttributeTypeHp     AttributeType = "HP"
	AttributeTypeCurrHp AttributeType = "CURR_HP"
	AttributeTypeWill   AttributeType = "WILL"
	AttributeTypePer    AttributeType = "PER"
	AttributeTypeFp     AttributeType = "FP"
	AttributeTypeCurrFp AttributeType = "CURR_FP"
	AttributeTypeBs     AttributeType = "BS"
	AttributeTypeBm     AttributeType = "BM"
)

var AllAttributeType = []AttributeType{
	AttributeTypeSt,
	AttributeTypeDx,
	AttributeTypeIq,
	AttributeTypeHt,
	AttributeTypeHp,
	AttributeTypeCurrHp,
	AttributeTypeWill,
	AttributeTypePer,
	AttributeTypeFp,
	AttributeTypeCurrFp,
	AttributeTypeBs,
	AttributeTypeBm,
}

func (e AttributeType) IsValid() bool {
	switch e {
	case AttributeTypeSt, AttributeTypeDx, AttributeTypeIq, AttributeTypeHt, AttributeTypeHp, AttributeTypeCurrHp, AttributeTypeWill, AttributeTypePer, AttributeTypeFp, AttributeTypeCurrFp, AttributeTypeBs, AttributeTypeBm:
		return true
	}
	return false
}

func (e AttributeType) String() string {
	return string(e)
}

func (e *AttributeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttributeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttributeType", str)
	}
	return nil
}

func (e AttributeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
