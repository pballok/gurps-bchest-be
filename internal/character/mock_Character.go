// Code generated by mockery. DO NOT EDIT.

package character

import (
	attribute "github.com/pballok/gurps-bchest-be/internal/attribute"
	mock "github.com/stretchr/testify/mock"

	model "github.com/pballok/gurps-bchest-be/internal/graph/model"
)

// MockCharacter is an autogenerated mock type for the Character type
type MockCharacter struct {
	mock.Mock
}

type MockCharacter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCharacter) EXPECT() *MockCharacter_Expecter {
	return &MockCharacter_Expecter{mock: &_m.Mock}
}

// Attribute provides a mock function with given fields: attributeType
func (_m *MockCharacter) Attribute(attributeType model.AttributeType) attribute.Attribute {
	ret := _m.Called(attributeType)

	if len(ret) == 0 {
		panic("no return value specified for Attribute")
	}

	var r0 attribute.Attribute
	if rf, ok := ret.Get(0).(func(model.AttributeType) attribute.Attribute); ok {
		r0 = rf(attributeType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attribute.Attribute)
		}
	}

	return r0
}

// MockCharacter_Attribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attribute'
type MockCharacter_Attribute_Call struct {
	*mock.Call
}

// Attribute is a helper method to define mock.On call
//   - attributeType model.AttributeType
func (_e *MockCharacter_Expecter) Attribute(attributeType interface{}) *MockCharacter_Attribute_Call {
	return &MockCharacter_Attribute_Call{Call: _e.mock.On("Attribute", attributeType)}
}

func (_c *MockCharacter_Attribute_Call) Run(run func(attributeType model.AttributeType)) *MockCharacter_Attribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.AttributeType))
	})
	return _c
}

func (_c *MockCharacter_Attribute_Call) Return(_a0 attribute.Attribute) *MockCharacter_Attribute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCharacter_Attribute_Call) RunAndReturn(run func(model.AttributeType) attribute.Attribute) *MockCharacter_Attribute_Call {
	_c.Call.Return(run)
	return _c
}

// Campaign provides a mock function with no fields
func (_m *MockCharacter) Campaign() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Campaign")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCharacter_Campaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Campaign'
type MockCharacter_Campaign_Call struct {
	*mock.Call
}

// Campaign is a helper method to define mock.On call
func (_e *MockCharacter_Expecter) Campaign() *MockCharacter_Campaign_Call {
	return &MockCharacter_Campaign_Call{Call: _e.mock.On("Campaign")}
}

func (_c *MockCharacter_Campaign_Call) Run(run func()) *MockCharacter_Campaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCharacter_Campaign_Call) Return(_a0 string) *MockCharacter_Campaign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCharacter_Campaign_Call) RunAndReturn(run func() string) *MockCharacter_Campaign_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockCharacter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCharacter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCharacter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCharacter_Expecter) Name() *MockCharacter_Name_Call {
	return &MockCharacter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCharacter_Name_Call) Run(run func()) *MockCharacter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCharacter_Name_Call) Return(_a0 string) *MockCharacter_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCharacter_Name_Call) RunAndReturn(run func() string) *MockCharacter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Player provides a mock function with no fields
func (_m *MockCharacter) Player() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Player")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCharacter_Player_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Player'
type MockCharacter_Player_Call struct {
	*mock.Call
}

// Player is a helper method to define mock.On call
func (_e *MockCharacter_Expecter) Player() *MockCharacter_Player_Call {
	return &MockCharacter_Player_Call{Call: _e.mock.On("Player")}
}

func (_c *MockCharacter_Player_Call) Run(run func()) *MockCharacter_Player_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCharacter_Player_Call) Return(_a0 string) *MockCharacter_Player_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCharacter_Player_Call) RunAndReturn(run func() string) *MockCharacter_Player_Call {
	_c.Call.Return(run)
	return _c
}

// Points provides a mock function with no fields
func (_m *MockCharacter) Points() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Points")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCharacter_Points_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Points'
type MockCharacter_Points_Call struct {
	*mock.Call
}

// Points is a helper method to define mock.On call
func (_e *MockCharacter_Expecter) Points() *MockCharacter_Points_Call {
	return &MockCharacter_Points_Call{Call: _e.mock.On("Points")}
}

func (_c *MockCharacter_Points_Call) Run(run func()) *MockCharacter_Points_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCharacter_Points_Call) Return(_a0 int) *MockCharacter_Points_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCharacter_Points_Call) RunAndReturn(run func() int) *MockCharacter_Points_Call {
	_c.Call.Return(run)
	return _c
}

// ToModel provides a mock function with no fields
func (_m *MockCharacter) ToModel() model.Character {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToModel")
	}

	var r0 model.Character
	if rf, ok := ret.Get(0).(func() model.Character); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.Character)
	}

	return r0
}

// MockCharacter_ToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToModel'
type MockCharacter_ToModel_Call struct {
	*mock.Call
}

// ToModel is a helper method to define mock.On call
func (_e *MockCharacter_Expecter) ToModel() *MockCharacter_ToModel_Call {
	return &MockCharacter_ToModel_Call{Call: _e.mock.On("ToModel")}
}

func (_c *MockCharacter_ToModel_Call) Run(run func()) *MockCharacter_ToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCharacter_ToModel_Call) Return(_a0 model.Character) *MockCharacter_ToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCharacter_ToModel_Call) RunAndReturn(run func() model.Character) *MockCharacter_ToModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCharacter creates a new instance of MockCharacter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCharacter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCharacter {
	mock := &MockCharacter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
