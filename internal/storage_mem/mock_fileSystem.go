// Code generated by mockery v2.46.3. DO NOT EDIT.

package storage_mem

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockfileSystem is an autogenerated mock type for the fileSystem type
type MockfileSystem struct {
	mock.Mock
}

type MockfileSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockfileSystem) EXPECT() *MockfileSystem_Expecter {
	return &MockfileSystem_Expecter{mock: &_m.Mock}
}

// ReadDir provides a mock function with given fields: _a0
func (_m *MockfileSystem) ReadDir(_a0 string) ([]os.DirEntry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []os.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]os.DirEntry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []os.DirEntry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockfileSystem_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type MockfileSystem_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - _a0 string
func (_e *MockfileSystem_Expecter) ReadDir(_a0 interface{}) *MockfileSystem_ReadDir_Call {
	return &MockfileSystem_ReadDir_Call{Call: _e.mock.On("ReadDir", _a0)}
}

func (_c *MockfileSystem_ReadDir_Call) Run(run func(_a0 string)) *MockfileSystem_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockfileSystem_ReadDir_Call) Return(_a0 []os.DirEntry, _a1 error) *MockfileSystem_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockfileSystem_ReadDir_Call) RunAndReturn(run func(string) ([]os.DirEntry, error)) *MockfileSystem_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: _a0
func (_m *MockfileSystem) ReadFile(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockfileSystem_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockfileSystem_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - _a0 string
func (_e *MockfileSystem_Expecter) ReadFile(_a0 interface{}) *MockfileSystem_ReadFile_Call {
	return &MockfileSystem_ReadFile_Call{Call: _e.mock.On("ReadFile", _a0)}
}

func (_c *MockfileSystem_ReadFile_Call) Run(run func(_a0 string)) *MockfileSystem_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockfileSystem_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockfileSystem_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockfileSystem_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *MockfileSystem_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfileSystem creates a new instance of MockfileSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfileSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockfileSystem {
	mock := &MockfileSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
